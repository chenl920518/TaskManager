package com.cn.hnust.service.impl;

import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cn.hnust.dao.DelayMapper;
import com.cn.hnust.dao.ProductionPlanMapper;
import com.cn.hnust.dao.ProjectMapper;
import com.cn.hnust.dao.ProjectReportMapper;
import com.cn.hnust.enums.ProjectStageEnum;
import com.cn.hnust.pojo.Delay;
import com.cn.hnust.pojo.ProductionPlan;
import com.cn.hnust.pojo.Project;
import com.cn.hnust.pojo.ProjectReport;
import com.cn.hnust.pojo.ProjectTask;
import com.cn.hnust.service.IProjectService;

@Service
public class ProjectServiceImpl implements IProjectService{
	@Autowired
	private ProjectMapper projectMapper;
	@Autowired
	private DelayMapper delayMapper;
	@Autowired
	private ProductionPlanMapper productionPlanMapper;
	@Autowired
	private ProjectReportMapper projectReportMapper;
	/**
	 * 查询项目列表根据登录用户的UserId;
	 */
	@Override
	public List<Project> findProjectList(Project project) {
		return projectMapper.findProjectList(project);
	}
	/**
	 * 根据项目号查询项目详情
	 */
	@Override
	public Project selectProjctDetails(String projectNo) {
		return projectMapper.selectProjctDetails(projectNo);
	}
	/**
	 * 显示项目详情信息
	 */
	@Transactional
	@Override
	public Project showDetails(String projectNo) {
		Project project=projectMapper.selectProjctDetails(projectNo);
		//查询项目的延期信息
		List<Delay> delayList=delayMapper.selectDelayByProjectNo(projectNo);
		//查询项目的生产计划
		List<ProductionPlan> planList=productionPlanMapper.selectProductionPlan(projectNo);
		//查询项目汇报情况
		List<ProjectReport> reportList=projectReportMapper.selectProjectReport(projectNo);
		
		if(reportList!=null&&reportList.size()>0){
			for(ProjectReport pr :reportList){
				if(pr.getProjectStage()!=null){
					pr.setProjectStageView(ProjectStageEnum.getEnum(pr.getProjectStage()).getValue());
					
				}
				
				
			}
			
			
		}
		
		project.setDelayList(delayList);
		project.setPlanList(planList);
		project.setReportList(reportList);
		return project;
	}
	@Override
	public void updateProjectInfo(Project project) {
		projectMapper.updateByPrimaryKeySelective(project);
	}
	@Override
	public List<Project> selectAllProject() {
		return projectMapper.selectAllProject();
	}
	/**
	 * 批量添加数据
	 */
	@Override
	public void batchAddProject(List<Project> projectList) {
		projectMapper.batchAddProject(projectList);
	}
	@Override
	public Project selectProjectByProjectNo(String projectNo) {
		return projectMapper.selectProjectByProjectNo(projectNo);
	}
	/**
	 * 查询交期延误的项目
	 */
	@Override
	public List<Project> findDelayProjectList(Project project) {
		return projectMapper.findDelayProjectList(project);
	}
	/**
	 * 统计没有设置交期的项目
	 */
	@Override
	public List<Project> findSetDeliveryTimeList(Project project) {
		return projectMapper.findSetDeliveryTimeList(project);
	}
	/**
	 * 统计项目汇报
	 */
	@Override
	public List<Project> findProjectReportList(Project project) {
		return projectMapper.findProjectReportList(project);
	}
	/**
	 * 统计没有项目汇报图片的项目
	 */
	@Override
	public List<Project> findProjectReportNoPicList(Project project) {
		return projectMapper.findProjectReportNoPicList(project);
	}
	/**
	 * 统计缺少任务汇报的项目
	 */
	@Override
	public List<Project> findProjectNoTaskReportList(Project project) {
		return projectMapper.findProjectNoTaskReportList(project);
	}
	/**
	 * 统计延期的项目列表
	 */
	@Override
	public List<Project> findProjectDelayCountList(Project project) {
		return projectMapper.findProjectDelayCountList(project);
	}
	/**
	 * 采购登录成功后查询采购列表
	 */
	@Override
	public List<Project> findPurchaseProjectList(Project project) {
		return projectMapper.findPurchaseProjectList(project);
	}
	/**
	 * 采购交期变更的项目统计
	 */
	@Override
	public List<Project> findDelayProjectPurchaseList(Project project) {
		return projectMapper.findDelayProjectPurchaseList(project);
	}
	/**
	 * 采购统计未设定实际交期的项目(采购)
	 */
	@Override
	public List<Project> findSetDeliveryTimePurchaseList(Project project) {
		return projectMapper.findSetDeliveryTimePurchaseList(project);
	}
	/**
	 * 统计出货延期的项目(采购)
	 */
	@Override
	public List<Project> findProjectDelayPurchaseCountList(Project project) {
		return projectMapper.findProjectDelayPurchaseCountList(project);
	}
	/**
	 * 统计项目的采购情况汇报(采购)
	 */
	@Override
	public List<Project> findProjectReportPurchaseList(Project project) {
		return projectMapper.findProjectReportPurchaseList(project);
	}
	/**
	 * 统计项目缺少开工图片的项目(采购)
	 */
	@Override
	public List<Project> findProjectReportNoPicPurchaseList(Project project) {
		return projectMapper.findProjectReportNoPicPurchaseList(project);
	}
	@Override
	public List<Project> findProjectNoTaskReportPurchaseList(Project project) {
		return projectMapper.findProjectNoTaskReportPurchaseList(project);
	}
	/**
	 * 查询采购报告(消息中心销售)
	 */
	@Override
	public List<Project> selectProjectRelationTask(Project project) {
		return projectMapper.selectProjectRelationTask(project);
	}
	/**
	 * 查询采购报告(消息中心采购)
	 */
	@Override
	public List<Project> selectPurchaseProjectRelationTask(Project project) {
		return projectMapper.selectPurchaseProjectRelationTask(project);
	}
	/**
	 * 销售进来查看是否有新的采购项目汇报
	 */
	@Override
	public List<Project> findProjectReportMessage(Project project) {
		return projectMapper.findProjectReportMessage(project);
	}
	@Override
	public void addProject(Project project) {
	  projectMapper.insertSelective(project);
	}
	/**
	 * 查询该销售下所属的采购
	 */
	@Override
	public List<Project> selectProjectPurchaseList(Project project) {
		return projectMapper.selectProjectPurchaseList(project);
	}
	/**
	 * 
	 */
	@Override
	public List<Project> findProjectListCount(Project project) {
		return projectMapper.findProjectListCount(project);
	}
	@Override
	public List<Project> findPurchaseProjectListCount(Project project) {
		// TODO Auto-generated method stub
		return projectMapper.findPurchaseProjectListCount(project);
	}
	@Override
	public List<Project> selectProjectRelationTaskCount(Project project) {
		// TODO Auto-generated method stub
		return projectMapper.selectProjectRelationTaskCount(project);
	}
	@Override
	public List<Project> selectPurchaseProjectRelationTaskCount(Project project) {
		// TODO Auto-generated method stub
		return projectMapper.selectPurchaseProjectRelationTaskCount(project);
	}
	@Override
	public List<Project> selectProjectList(boolean hasEmailUserId,
			boolean hasPurchaseId) {
	
		return projectMapper.selectProjectList(hasEmailUserId, hasPurchaseId);
	}
	@Override
	public int updateFlogByProjectNo(Set<String> proSet) {
		return projectMapper.updateFlogByProjectNo(proSet);
	}
	
	
	
	@Override
	public int updateaddFlogByProjectNo(Set<String> proSet) {
		return projectMapper.updateaddFlogByProjectNo(proSet);
	}
	@Override
	public List<ProjectTask> selectProject(ProjectTask projectTask) {
		
		return projectMapper.selectProject(projectTask);
	}
	@Override
	public List<ProjectTask> selectProjectCount(ProjectTask projectTask) {
		
		return projectMapper.selectProjectCount(projectTask);
	}
	@Override
	public int updateFlogByProjectNoFirst(Set<String> proSet) {
		return projectMapper.updateFlogByProjectNoFirst(proSet);
	}
	@Override
	public int updateaddFlogByProjectNoFirst(Set<String> proSet) {
		return projectMapper.updateaddFlogByProjectNoFirst(proSet);
	}

	
	
}
